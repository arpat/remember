# [ -a FILE ] ## bash tests True if FILE exists.
# [ -b FILE ] ## bash tests True if FILE exists and is a block-special file.
# [ -c FILE ] ## bash tests True if FILE exists and is a character-special file.
# [ -d FILE ] ## bash tests True if FILE exists and is a directory.
# [ -e FILE ] ## bash tests True if FILE exists.
# [ -f FILE ] ## bash tests True if FILE exists and is a regular file.
# [ -g FILE ] ## bash tests True if FILE exists and its SGID bit is set.
# [ -h FILE ] ## bash tests True if FILE exists and is a symbolic link.
# [ -k FILE ] ## bash tests True if FILE exists and its sticky bit is set.
# [ -p FILE ] ## bash tests True if FILE exists and is a named pipe (FIFO).
# [ -r FILE ] ## bash tests True if FILE exists and is readable.
# [ -s FILE ] ## bash tests True if FILE exists and has a size greater than zero.
# [ -t FD ] ## bash tests True if file descriptor FD is open and refers to a terminal.
# [ -u FILE ] ## bash tests True if FILE exists and its SUID (set user ID) bit is set.
# [ -w FILE ] ## bash tests True if FILE exists and is writable.
# [ -x FILE ] ## bash tests True if FILE exists and is executable.
# [ -O FILE ] ## bash tests True if FILE exists and is owned by the effective user ID.
# [ -G FILE ] ## bash tests True if FILE exists and is owned by the effective group ID.
# [ -L FILE ] ## bash tests True if FILE exists and is a symbolic link.
# [ -N FILE ] ## bash tests True if FILE exists and has been modified since it was last read.
# [ -S FILE ] ## bash tests True if FILE exists and is a socket.
# [ FILE1 -nt FILE2 ] ## bash tests True if FILE1 has been changed more recently than FILE2, or if FILE1 exists and FILE2 does not.
# [ FILE1 -ot FILE2 ] ## bash tests True if FILE1 is older than FILE2, or is FILE2 exists and FILE1 does not.
# [ FILE1 -ef FILE2 ] ## bash tests True if FILE1 and FILE2 refer to the same device and inode numbers.
# [ -o OPTIONNAME ] ## bash tests True if shell option "OPTIONNAME" is enabled.
# [ -z STRING ] ## bash tests True of the length if "STRING" is zero.
# [ -n STRING ] ## bash tests or [ STRING ] ## bash tests True if the length of "STRING" is non-zero.
# [ STRING1 == STRING2 ] ## bash tests True if the strings are equal. "=" may be used instead of "==" for strict POSIX compliance.
# [ STRING1 != STRING2 ] ## bash tests True if the strings are not equal.
# [ STRING1 < STRING2 ] ## bash tests True if "STRING1" sorts before "STRING2" lexicographically in the current locale.
# [ STRING1 > STRING2 ] ## bash tests True if "STRING1" sorts after "STRING2" lexicographically in the current locale.
# [ ARG1 OP ARG2 ] ## bash tests "OP" is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if "ARG1" is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to "ARG2", respectively. "ARG1" and "ARG2" are integers.
# [ ! EXPR ] ## bash tests True if EXPR is false.
# [ ( EXPR ) ] ## bash tests Returns the value of EXPR. This may be used to override the normal precedence of operators.
# [ EXPR1 -a EXPR2 ] ## bash tests True if both EXPR1 and EXPR2 are true.
# [ EXPR1 -o EXPR2 ] ## bash tests True if either EXPR1 or EXPR2 is true. 
